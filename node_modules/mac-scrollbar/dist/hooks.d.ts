import type { RefObject } from 'react';
export declare function useInitial<T extends (...args: any) => any>(callback: T): ReturnType<T>;
export declare function useLatest<T>(something: T): import("react").MutableRefObject<T>;
export declare function useEventListener<K extends keyof WindowEventMap>(type: K | undefined, fn: (evt: WindowEventMap[K]) => void, options?: AddEventListenerOptions): void;
export declare function useResizeObserver(scrollBoxRef: RefObject<HTMLElement | null>, callback: () => void): void;
export declare function useDebounceCallback<CallbackArguments extends any[]>(callback: (...args: CallbackArguments) => void, { leading, maxWait, wait, }: {
    leading?: boolean;
    maxWait?: number;
    wait?: number;
}): (...args: CallbackArguments) => void;
